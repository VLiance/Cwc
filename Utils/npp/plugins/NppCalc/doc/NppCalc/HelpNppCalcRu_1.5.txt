ENTER - выполнить расчет

Основные
	+	сложение
	-	вычитание
	*	умножение
	/	деление
	^	степень
	+>	конкатенация

Присваивание
	:=	присваивание
	+=	присваивание с суммированием
	-=	присваивание с вычитанием
	*=	присваивание с умножением
	/=	присваивание с делением

Сравнение
	=	равно
	>	больше
	>=	больше или равно
	<	меньше
	<=	меньше или равно
	<>	не равно

Разделитель целой и дробной части чисел
	. ( точка )
Разделитель функций
	; ( точка с запятой )
Разделитель параметров функций
	, ( запятая )
Строковые данные заключаются в одинарные кавычки
	a := 'abcde'


Создать массив
	a := ( 1, 2, 3 )
Доступ к элементу массива
	a[0]
Установка значения элемента массива
	a[0] := 5

Содержится ли элемент в массиве
	'1' IN ( '1', '2', '3' )
Строка представлена как массив символов
	a := 'abcde'
	a[0]
Разбить строку в массив по разделителю
	a := Split( '1;2;3;4', ';' )
Объединить элементы массива в строку
	Join( ( 1, 2, 3, 'a' ), CRLF )
	Join( ( 1, 2, 3, 'a' ), CRLF, True )
Сортировать массив по возрастанию
	Sort( ( 4, 2, 1, 3 ) )
Сортировать массив по убыванию
	RSort( ( 4, 2, 1, 3 ) )
Создать массив, содержащий диапазон элементов
	Range( start, end, step )
	Range( 0, 10, 2 )
Индекс первого найденного элемента в массиве
	IndexOf( 3, ( 1, 2, 3, 4 ) )
Количество элементов в массиве
	CountOf( 3, ( 1, 2, 3, 4, 3 ) )

Приведение к целому типу
	Int( '10.9' )
Приведение к вещественному типу
	Float( '10.9' )
Приведение к строковому типу
	Str( 10 )
Приведение к логическому типу
	Bool( 10.9 )
Приведение к пустому значению
	Empty( 10.9 )

Добавить текст в буфер вывода
	Echo( 2 )

Выбор по условию
	IF ( condition, a, b )
	IF ( 1 > 2, echo( true ), echo( false ) )

	IF ( condition, a, b, condition, a, b )
	IF ( 1 > 2, echo( true ), echo( false ), 2 > 1, echo( true ), echo( false ) )

Операторы цикла, повторяют инструкции, пока выполняется условие
	For( i := 0, i < 10, Inc( i ), Echo( i ) )
	i := 0; While( i < 10, Inc( i ); Echo( i ) )
	i := 0; Repeat( Inc( i ); Echo( i ), i = 10 )
	array := ( 1, 2, 3 ); Foreach( elem, array, Echo( elem ) )

Прервать выполнение текущего цикла
	Break
Пропуск оставшейся части текущей итерации цикла
	Continue


Исполнить код, содержащийся в строке
	Eval( 'MsgBox( 2^8, ''test'' )' )
Исполнить код из файла ( общие переменные )
	EvalFromFile( filename )

Логические
	True
	False
Пустое значение
	Null
Число Пи
	Pi
Основание натурального логарифма
	e
Постоянная Каталана
	Catalan
Постоянная Эйлера
	Euler
Золотое сечение
	GoldenRatio
Скорость света ( м/сек )
	Light
Скорость звука ( м/сек )
	Sound
Ускорение свободного падения ( м/сек )
	Gravity
Возврат каретки
	CR
Перевод строки
	LF
Возврат каретки и перевод строки
	CRLF


Шестнадцатеричное число
	0xAF
Восьмеричное число
	0t777
Двоичное число
	0b100101
Символ
	#65


Увеличить число на соответствующее значение
	Inc( 5, [1] )
Возведение в степень
	2^3
Возведение в квадрат
	Sqr( 20 )
Квадратный корень
	Sqrt( 9 )
Корень любой степени
	SqrN( 27, 3 )
Целочисленное деление
	100 div 3
Остаток от деления
	100 mod 3
Проценты
	Per( 200, 10 )
Модуль числа
	Abs( -20 )
Вычисление "e" в указанной степени
	Exp( 2 )
Натуральный логарифм
	Ln( 10 )
Десятичный логарифм
	Lg( 10 )
Двоичный логарифм
	Log2( 2 )
Логарифм по указанному основанию
	LogN( 5 [base], 1 )
Факториал числа
	Factorial( 5 )
Числа Фибоначчи
	Fibonacci( 10 )
Количество цифр в числе
	Digits( 123456 )
Является ли число четным
	Even( 4 )
Является ли число нечетным
	Odd( 4 )
Является ли число простым
	IsPrime( 7 )
Следующее простое число
	NextPrime( 7 )
Предыдущее простое число
	PrevPrime( 11 )
Случайное простое число
	RandomPrime( 1000 )
Наименьшее общее кратное
	LCM( 27, 18 )
Наибольший общий делитель
	GCD( 27, 18 )
Вычислить однородный полином
	Poly( 5, ( 1, 2, 3, 4 ) )
Среднее арифметическое всех значений массива
	Avg( ( 1, 2, 3, 4 ) )
Сумма элементов массива
	Sum( ( 1, 2, 3, 4 ) )
Сумма квадратов массива
	SumOfSquares( ( 1, 2, 3, 4 ) )
Наибольшее значение числового массива
	Max( ( 1, 2, 3, 4 ) )
Наименьшее значение числового массива
	Min( ( 1, 2, 3, 4 ) )
Стандартное среднеквадратичное отклонение
	StdDev( ( 1, 2, 3, 4 ) )
Среднеквадратичное отклонение для совокупности данных
	PopnStdDev( ( 1, 2, 3, 4 ) )
Типовая дисперсия всех значений
	Variance( ( 1, 2, 3, 4 ) )
Дисперсия совокупности данных
	PopnVariance( ( 1, 2, 3, 4 ) )
Статистическая дисперсия
	TotalVariance( ( 1, 2, 3, 4 ) )
Евклидова норма для всех значений массива
	Norm( ( 1, 2, 3, 4 ) )


Синус
	Sin( 1 )
Арксинус
	ArcSin( 1 )
Гиперболический синус
	SinH( 1 )
Гиперболический арксинус
	ArcSinH( 1 )

Косинус
	Cos( 1 )
Арккосинус
	ArcCos( 1 )
Гиперболический косинус
	CosH( 1 )
Гиперболический арккосинус
	ArcCosH( 1 )

Тангенс
	Tan( 1 )
Арктангенс
	ArcTan( 1 )
Арктангенс ( Y/X )
	ArcTan2( y, x )
Гиперболический тангенс
	TanH( 1 )
Гиперболический арктангенс
	ArcTanH( 0 )

Котангенс
	Cot( 1 )
Арккотангенс
	ArcCot( 1 )
Гиперболический котангенс
	CotH( 1 )
Гиперболический арккотангенс
	ArcCotH( 10 )

Секанс
	Sec( 1 )
Арксеканс
	ArcSec( 1 )
Гиперболический секанс
	SecH( 1 )
Гиперболический арксеканс
	ArcSecH( 1 )

Косеканс
	Csc( 1 )
Арккосеканс
	ArcCsc( 1 )
Гиперболический косеканс
	CscH( 1 )
Гиперболический арккосеканс
	ArcCscH( 1 )

Длина гипотенузы прямоугольного треугольника по катетам
	Hypot( 3, 4 )

Из радиан в градусы
	RadToDeg( 1 )
Из радиан в грады
	RadToGrad( 1 )
Из радиан в циклы
	RadToCycle( 1 )
Из градусов в радианы
	DegToRad( 1 )
Из градусов в грады
	DegToGrad( 1 )
Из градусов в циклы
	DegToCycle( 1 )
Из градов в радианы
	GradToRad( 1 )
Из градов в градусы
	GradToDeg( 1 )
Из градов в циклы
	GradToCycle( 1 )
Из циклов в радианы
	CycleToRad( 1 )
Из циклов в градусы
	CycleToDeg( 1 )
Из циклов в грады
	CycleToGrad( 1 )

* Для тригонометрических функций аргумент в радианах


Код символа
	Ord( 'A' )
Символ
	Chr( 65 )
Длина строки/массива
	Len( 'ABC' )
Позиция подстроки
	Pos( 'bc', 'abcde' )
Позиция подстроки, начиная с указанной позиции
	PosEx( 'bc', 'abcdebc', 3 )
Получение подстроки расположенную между двух строк
	StrPart( 'ab', 'bc', 'abcdebc' )
Сравнение
	CompareStr( 'ABC', 'abc' )
	CompareText( 'ABC', 'abc' )
Смена регистра
	UpperCase( 'Abc' )
	LowerCase( 'Abc' )
Удаление пробелов
	Trim( ' ABC ' )
	TrimLeft( ' ABC' )
	TrimRight( 'ABC ' )
Замена подстроки
	StrReplace( 'abcabc', 'b', 'B' )
Часть строки
	SubStr( 'ABCD', 2, 2 )
Перевернуть строку
	StrRev( 'abcd' )
Дополнить строку справа
	RightPad( 'abcd', 6, '-' )
Дополнить строку слева
	LeftPad( 'abcd', 6, '-' )
Алфавит
	Alphabet( ' ', ['ru'] )
Перенос строки по указанному количеству символов
	WordWrap( 'string string', 6 )
Конвертировать из html формата в текстовый формат
	HtmlToPlain( htmldata )
Ключ схожести звучания
	Soundex( 'abcd' )
Расстояние Левенштейна
	Levenshtein( 'abcd', 'abdc' )
Вставка подстроки между символами строки
	Sparse( 'abcdef', '-', 3 )
Перемешать символы строки
	Shuffle( 'abcdef' )
Рассчитать энтропию строки
	Entropy( 'abcdef', [detail = true] )


Уникальный 128-битный идентификатор
	GUID()


Отсечь дробную часть
	Trunc( 10.9 )
Дробная часть
	Frac( 10.9 )
Округление к ближайшему целому
	Round( 10.6 )
Округлить число с указанной точностью
	RoundTo( 10.653, -1 )
Округление вверх
	Ceil( 10.5 )
Округление вниз
	Floor( 10.5 )
Шестнадцатеричное число
	Hex( 1000 )
Восьмеричное число
	Oct( 100 )
Двоичное число
	Bin( 20 )
Римское число
	Roman( 15 )
	RomanToDec( 'XVIII' )
Форматирование
	FormatFloat( '0.00', 1.2345 )
	Bytes( 102434435 )
Перевод в произвольную систему счисления ( от 2 до 36 )
	DecToBase( 200, 16 )
	BaseToDec( 'C8', 16 )


Текущая дата
	Date( ['d', 'M', 'y'] )
	Date( 'd' )

Текущее время
	Time( ['h', 'm', 's'] )
	Time( 's' )

Текущая дата и время
	Now( ['d', 'M', 'y', 'h', 'm', 's'] )
	Now( 'y' )

Количество миллисекунд, прошедших после запуска системы
	GetTickCount()

Увеличивается дата на соответствующе значение
	IncSecond( date(), 30 )
	IncMinute( date(), 30 )
	IncHour( date(), 12 )
	IncDay( date(), 7 )
	IncWeek( date(), 1 )
	IncMonth( date(), 12 )
	IncYear( date(), 10 )

*Второй параметр по умолчанию 1
**Если параметр отрицательный то происходит уменьшение

Часть значения из даты
	SecondOf( now() )
	MinuteOf( now() )
	HourOf( now() )
	DayOf( now() )
	WeekOf( now() )
	MonthOf( now() )
	YearOf( now() )

Разница между датами
	SecondsBetween( date(), date() + 1 )
	MinutesBetween( date(), date() + 1 )
	HoursBetween( date(), date() + 1 )
	DaysBetween( date(), date() + 1 )
	WeeksBetween( date(), date() + 7 )
	MonthsBetween( date(), date() + 31 )
	YearsBetween( date(), date() + 366 )
	DateBetween( date(), date() + 1.11, ['ru'] )

Недель в году
	WeeksInYear( now() )
Дней в году
	DaysInYear( now() )
Дней в месяце
	DaysInMonth( now() )

Порядковый номер по дате/времени
	MonthOfTheYear( now() )
	WeekOfTheYear( now() )
	DayOfTheYear( now() )
	HourOfTheYear( now() )
	MinuteOfTheYear( now() )
	SecondOfTheYear( now() )
	MilliSecondOfTheYear( now() )

	WeekOfTheMonth( now() )
	DayOfTheMonth( now() )
	HourOfTheMonth( now() )
	MinuteOfTheMonth( now() )
	SecondOfTheMonth( now() )
	MilliSecondOfTheMonth( now() )

	DayOfTheWeek( now() )
	HourOfTheWeek( now() )
	MinuteOfTheWeek( now() )
	SecondOfTheWeek( now() )
	MilliSecondOfTheWeek( now() )

	HourOfTheDay( now() )
	MinuteOfTheDay( now() )
	SecondOfTheDay( now() )
	MilliSecondOfTheDay( now() )

	MinuteOfTheHour( now() )
	SecondOfTheHour( now() )
	MilliSecondOfTheHour( now() )

	SecondOfTheMinute( now() )
	MilliSecondOfTheMinute( now() )

	MilliSecondOfTheSecond( now() )

Сравнение дат
	SameDateTime( date(), time() )
	SameDate( date(), date() )
	SameTime( now(), time() )

Является ли год високосным
	IsLeapYear( 2012 )

Возраст человека по дате
	Age( '01.01.1965', [now()] )

Гороскоп
	Horoscope( '01.01.1965', ['ru'] )

Форматирование даты
	UnixTime( Now() )
	TimeUnix( '@1111111111' )

	FormatDateTime( 'dd.MM.yyyy hh:mm:ss', now() )


Расстояние между географическими координатами в метрах
	VincentyDistance( latitude1, longitude1, latitude2, longitude2 )
	VincentyDistance( 55.7537, 37.6199, 40.7145, -74.0071 )

Евклидова дистанция
	EuclideanDistance( (100, 100), (200, 200) )


Проверка бита
	isBitSet( 500, 3 )
Включение бита
	BitOn( 500, 3 )
Выключение бита
	BitOff( 508, 3 )
Инвертирование бита
	BitToggle( 500, 3 )
Поразрядное "И"
	10 and 50
Поразрядное "ИЛИ"
	10 or 50
Поразрядное "Исключающее ИЛИ"
	10 xor 50
Поразрядный сдвиг влево
	10 shl 1
Поразрядный сдвиг вправо
	10 shr 1
Отрицание
	not True


Генератор случайных чисел
	Rnd( 100 )
Генератор строки случайных символов
	RndP( 12, ['char map'] )
Случайное число с отклонением по Гауссу от среднего значения Mean
	RandG( mean, stddev )
Генератор случайных чисел в пределах введённого диапазона
	RandomRange( 10, 100 )
Выбрать случайное значение из массива
	RandomFrom( ( 1, 2, 3, 4 ) )


Гудок
	Beep( freq, duration )
Воспроизвести звуковой файл
	PlaySound( filename, false [async] )
Ожидать n миллисекунд ( прервать ctrl-break )
	Wait( 5000 )
Диалоговое окно с сообщением
	MsgBox( 'message', 'caption' )
Запуск программы
	Exec( 'filename', ['parameters'], ['directory'] )


Открыть com-порт
	handle := OpenComPort( 1 )
Установить скорость
	BaudRate( handle, 9600 )

Подключиться по TCP/IP
	handle := TcpClient( 'host / ip', port, [Timeout=1000] )

Отправить данные
	WriteData( handle, 'data' )
Получить данные
	ReadData( handle, count )
Получить все данные
	ReadAll( handle )
Закрыть соединение
	Close( handle )


Отправка сообщений пользователям, зарегистрированным в рабочей группе
	NetSend( 'host / ip', 'message' )

Проверка соединений TCP/IP
	Ping( 'host / ip' )


Названия функций соответствует алгоритму кодирования. _E - кодировать, _D - раскодировать
	Base64_E( 'string' )
	Base64_D( 'c3RyaW5n' )
	Morse_E( 'string', 'eng' ['rus'] )
	Morse_D( '... - .-. .. -. --.', 'eng' ['rus'] )
	UUE_E( 'string' )
	UUE_D( '&<W1R:6YG' )
	XXE_E( 'string' )
	XXE_D( '4QrFmOKtb' )
	URL_E( 'строка' )
	URL_D( '%F1%F2%F0%EE%EA%E0' )

	StrToHex( 'string' )
	HexToStr( '737472696E67' )

	AnsiToUtf8( 'строка' )
	Utf8ToAnsi( 'СЃС‚СЂРѕРєР°' )

	AnsiToOem( 'строка' )
	OemToAnsi( 'бва®Є ' )

Названия функций соответствует алгоритму шифрования. _E - шифровать, _D - расшифровать
	Blowfish_E( 'string', 'key' )
	Blowfish_D( HexToStr( 'D6F0DF7489EC' ), 'key' )
	Twofish_E( 'string', 'key' )
	Twofish_D( HexToStr( '7E9CBE8F9B06' ), 'key' )
	Cast128_E( 'string', 'key' )
	Cast128_D( HexToStr( '216212CDDE4B' ), 'key' )
	Cast256_E( 'string', 'key' )
	Cast256_D( HexToStr( '05791D1DAD20' ), 'key' )
	DES_E( 'string', 'key' )
	DES_D( HexToStr( '6FAE586796A6' ), 'key' )
	DES3_E( 'string', 'key' )
	DES3_D( HexToStr( '2951EBBAC9FD' ), 'key' )
	Ice_E( 'string', 'key' )
	Ice_D( HexToStr( '84C91E3A8077' ), 'key' )
	Ice2_E( 'string', 'key' )
	Ice2_D( HexToStr( 'A328DA587437' ), 'key' )
	ThinIce_E( 'string', 'key' )
	ThinIce_D( HexToStr( '41A405D7254E' ), 'key' )
	IDEA_E( 'string', 'key' )
	IDEA_D( HexToStr( 'CA102AED6B57' ), 'key' )
	MARS_E( 'string', 'key' )
	MARS_D( HexToStr( 'C96B02CCFC78' ), 'key' )
	Misty1_E( 'string', 'key' )
	Misty1_D( HexToStr( '38ADC95AA8C0' ), 'key' )
	RC2_E( 'string', 'key' )
	RC2_D( HexToStr( '436053FA3B04' ), 'key' )
	RC4_E( 'string', 'key' )
	RC4_D( HexToStr( 'A236F9BAFB0A' ), 'key' )
	RC5_E( 'string', 'key' )
	RC5_D( HexToStr( 'EB9AC33B9AFB' ), 'key' )
	RC6_E( 'string', 'key' )
	RC6_D( HexToStr( '24A465DE92F2' ), 'key' )
	Rijndael_E( 'string', 'key' )
	Rijndael_D( HexToStr( '1FF3E7BB38EE' ), 'key' )
	Serpent_E( 'string', 'key' )
	Serpent_D( HexToStr( '79C40F945083' ), 'key' )
	TEA_E( 'string', 'key' )
	TEA_D( HexToStr( 'EB2858E82879' ), 'key' )
	XOR_E( 'string', 'key' )
	XOR_D( HexToStr( '18110B020B1E' ), 'key' )

Названия функций соответствует алгоритму сжатия данных. _P - компрессия, _U - декомпрессия
	RLE_P( 'ssssss' )
	RLE_U( HexToStr( '1973' ) )
	Huffman_P( 'ssssss' )
	Huffman_U( HexToStr( '06000000E700' ) )
	ArithmeticCoding_P( 'ssssss' )
	ArithmeticCoding_U( HexToStr( '8B7E9FE80000' ) )
	LZO_P( 'ssssss' )
	LZO_U( HexToStr( '060017737373737373' ) )
	LZW_P( 'ssssss' )
	LZW_U( HexToStr( '801CE0503808' ) )
	LZSS_P( 'ssssss' )
	LZSS_U( HexToStr( '0173EEF2' ) )
	LZ77_P( 'ssssss' )
	LZ77_U( HexToStr( '0600000002730200' ) )
	LZMA_P( 'ssssss' )
	LZMA_U( HexToStr( '5D0000400006000000000000000039E97C000000' ) )
	Deflate_P( 'ssssss' )
	Deflate_U( HexToStr( '78DA2B2E060100097502B3' ) )

Названия функций соответствует алгоритму хеширования
	CRC32( 'string' )
	CRC32B( 'string' )
	MD2( 'string' )
	MD4( 'string' )
	MD5( 'string' )
	SHA1( 'string' )
	SHA256( 'string' )
	SHA384( 'string' )
	SHA512( 'string' )
	Haval128( 'string' )
	Haval160( 'string' )
	Haval192( 'string' )
	Haval224( 'string' )
	Haval256( 'string' )
	Gost( 'string' )
	Tiger128( 'string' )
	Tiger160( 'string' )
	Tiger192( 'string' )
	RipeMD128( 'string' )
	RipeMD160( 'string' )
	Adler32( 'string' )


Вывести все возможные перестановки
	Permutation( 'a', 'b', 'c' )
Вывести все размещения из N по M
	Arrangement( 2, 'a', 'b', 'c' )
Вывести все возможные размещения
	FullArrangement( 'a', 'b', 'c' )
Вывести все сочетания из N по M
	Combination( 2, 'a', 'b', 'c' )
Вывести все возможные сочетания
	FullCombination( 'a', 'b', 'c' )


Скопировать в буфер обмена
	ClipPut( 'string' )
Вставить из буфера обмена
	ClipGet()


Получить прямоугольник области экрана
	GetRect()

Сделать скриншот
	Screenshot( 'screen' )
	Screenshot( 'area', GetRect() )
	Screenshot( 'window' )
	Screenshot( 'client' )

Просмотр изображения
	Preview( filename/imagedata/color )
Конвертировать изображение в Windows Bitmap
	BMP( filename/imagedata )
Конвертировать изображение в JPEG
	JPG( filename/imagedata )
Конвертировать изображение в Portable network graphic
	PNG( filename/imagedata )
Конвертировать изображение в Graphics interchange format
	GIF( filename/imagedata )
Конвертировать изображение в Truevision
	TGA( filename/imagedata )


Диалог выбора шрифта
	FontDialog()

Диалог выбора цвета
	ColorDialog()
	ColorDialog( 0x00DEADFF )

Получить цвет пикселя в любом окне
	PickColor()

Получить цвет из цветовой модели: red, green, blue
	RGB( 255, 173, 222 )
Разложить цвет на составляющие: red, green, blue
	ColorToRGB( 0x00DEADFF )

Получить цвет из цветовой модели: hue, saturation, lightness
	HSL( 324.1, 360.5, 302.6 )
Разложить цвет на составляющие: hue, saturation, lightness
	ColorToHSL( 0x00DEADFF )

Получить цвет из цветовой модели: win240 hue, saturation, lightness
	WinHSL240( 216.1, 240.5, 201.9 )
Разложить цвет на составляющие: win240 hue, saturation, lightness
	ColorToWinHSL240( 0x00DEADFF )

Получить цвет из цветовой модели: win255 hue, saturation, lightness
	WinHSL255( 195.4, 255.5, 214.5 )
Разложить цвет на составляющие: win255 hue, saturation, lightness
	ColorToWinHSL255( 0x00DEADFF )

Получить цвет из цветовой модели: cyan, magenta, yellow
	CMY( 0, 82, 33 )
Разложить цвет на составляющие: cyan, magenta, yellow
	ColorToCMY( 0x00DEADFF )

Получить цвет из цветовой модели: cyan, magenta, yellow, black
	CMYK( 0, 32.2, 12.9, 0 )
Разложить цвет на составляющие: cyan, magenta, yellow, black
	ColorToCMYK( 0x00DEADFF )

Получить цвет из цветовой модели: luma, 2 chrominance
	YUV( 190.5, 137.4, 160.5 )
Разложить цвет на составляющие: luma, 2 chrominance
	ColorToYUV( 0x00DEADFF )

Получить цвет из цветовой модели: hue, saturation, value
	HSV( 324.1, 32.2, 100 )
Разложить цвет на составляющие: hue, saturation, value
	ColorToHSV( 0x00DEADFF )

Получить цвет из цветовой модели: luma, in phase, quadrature
	YIQ( 203.1, 161.1, 160.6 )
Разложить цвет на составляющие: luma, in phase, quadrature
	ColorToYIQ( 0x00DEADFF )

Получить цвет из цветовой модели: luma, blue-difference, red-difference
	YCbCr( 203.1, 160.4, 137.4 )
Разложить цвет на составляющие: luma, blue-difference, red-difference
	ColorToYCbCr( 0x00DEADFF )

Получить цвет из цветовой модели: CIE XYZ
	XYZ( 69.4, 56.4, 76.3 )
Разложить цвет на составляющие: CIE XYZ
	ColorToXYZ( 0X00DEADFF )

Получить цвет из цветовой модели: CIE LAB
	LAB( 79.9, 37, -12.4 )
Разложить цвет на составляющие: CIE LAB
	ColorToLAB( 0x00DEADFF )

Сравнить цвета
	CompareColors( 0x00DEADFF, 0x00DEADFE )
Получить средний цвет
	GetAvgColor( 0x00FF0000, 0x00000000 )
Получить цвет с прозрачностью
	TransparencyColor( color, background, value [0..100] )
	TransparencyColor( 0x000000FF, 0x0000FFFF, 20 )
Инвертировать цвет
	InvertColor( 0x00DEADFF )
Гамма-коррекция
	GammaCorrection( 0x00DEADFF, 1.5 )
Преобразовать в серое
	ColorToGray( 0x00DEADFF )
Получить цвет по длине волны, [380..780] nanometers
	WavelengthToColor( 580 )
Получить цвет по частоте волны, [384..788] terahertz
	FrequencyToColor( 640 )


Установить формат ввода/вывода цвета
	'colorref':		'0x00DEADFF'			// colorref
	'html':			'#FFADDE'				// html color
	'css':			'rgb( 255, 173, 222 )'	// css color
	'delphi':		'$00DEADFF'				// delphi color
	'bgrdec':		'( 222, 173, 255 )'		// bgr decimal
	'bgrnum':		'14593535'				// bgr number

	SetColorFmt( 'colorref' )
	SetColorFmt( 'html css bgrnum' )

Получить формат ввода/вывода цвета
	GetColorFmt()


Диалог выбора каталога
	FolderDialog()
	FolderDialog( 'C:\' )
Диалог открытия файла
	OpenDialog()
	OpenDialog( 'C:\', 'text file|*.txt' )
Диалог сохранения файла
	SaveDialog()
	SaveDialog( 'C:\', 'text file|*.txt' )
Прочитать файл
	LoadFromFile( filename )
Записать в файл. mode: 'a' - добавление, 'w' - перезапись
	SaveToFile( data, filename, mode )
Исправить в имени файла недопустимые символы
	FixFileName( filename )
Скопировать файл или директорию
	Copy( oldname, newname )
Переместить файл или директорию
	Move( oldname, newname )
Удалить файл или директорию в корзину
	Remove( filename )
Существует ли указанный файл
	FileExists( filename )
Существует ли указанный каталог
	DirectoryExists( pathname )
Найти все файлы, соответствующие маске файла
	FindFile( 'c:\', '*.*', false [subfolder] )
Извлечь из полного имени файла путь
	ExtractFilePath( filename )
Извлечь из полного имени файла название диска
	ExtractFileDrive( filename )
Извлечь из полного имени файла краткое имя файла
	ExtractFileName( filename )
Извлечь из полного имени файла его расширение
	ExtractFileExt( filename )
Изменить расширение имени файла
	ChangeFileExt( filename, ext )
Получить дату/время последнего изменения файла
	FileAge( filename )
Получить текущий каталог
	GetCurrentDir()
Установить текущий каталог
	SetCurrentDir( path )
Создать новый каталог
	CreateDir( path )
Создать последовательность каталогов
	ForceCreateDir( path )


Преобразование одной величины измерения в другую
	Convert( 1, 'kilometers', 'meters' )
	Convert( 0, 'kelvin', 'celsius' )
	Convert( 1, 'millennia', 'years' )
	Convert( 1, 'ukpints', 'liters' )

Расстояние
	'Micromicrons', 'Angstroms', 'Millimicrons', 'Microns',
	'Millimeters', 'Centimeters', 'Decimeters', 'Meters',
	'Decameters', 'Hectometers', 'Kilometers', 'Megameters',
	'Gigameters', 'Inches', 'Feet', 'Yards', 'LightYears',
	'NauticalMiles', 'AstronomicalUnits', 'Points', 'Miles',
	'Parsecs', 'Cubits', 'Fathoms', 'Furlongs', 'Chains',
	'Paces', 'Rods', 'Links', 'Picas', 'Hands'

Площадь
	'SquareMillimeters', 'SquareCentimeters', 'Ares',
	'SquareDecimeters', 'SquareMeters', 'SquareDecameters',
	'SquareHectometers', 'SquareKilometers', 'SquareInches',
	'SquareFeet', 'SquareYards', 'SquareMiles', 'Acres',
	'Centares', 'Hectares', 'SquareRods'

Объем
	'CubicMillimeters', 'CubicCentimeters', 'CubicDecimeters',
	'CubicMeters', 'CubicDecameters', 'CubicHectometers',
	'CubicKilometers', 'CubicInches', 'CubicFeet', 'CubicYards',
	'CubicMiles', 'MilliLiters', 'CentiLiters', 'DeciLiters',
	'Liters', 'DecaLiters', 'HectoLiters', 'KiloLiters', 'Cords',
	'AcreFeet', 'AcreInches', 'CordFeet', 'Decisteres', 'Steres',
	'Decasteres', 'FluidGallons', 'FluidQuarts', 'FluidPints',
	'FluidCups', 'FluidGills', 'FluidOunces', 'FluidTablespoons',
	'FluidTeaspoons', 'DryGallons', 'DryQuarts', 'DryPints',
	'DryPecks', 'DryBuckets', 'DryBushels', 'UKGallons', 'UKGill',
	'UKQuarts', 'UKPints', 'UKOunces', 'UKPecks', 'UKPottle',
	'UKBuckets', 'UKBushels'

Масса
	'Nanograms', 'Micrograms', 'Milligrams', 'Centigrams', 'Grams',
	'Decigrams', 'Decagrams', 'Hectograms', 'Kilograms', 'MetricTons',
	'Drams', 'Grains', 'Tons', 'LongTons', 'Ounces', 'Pounds', 'Stones'

Температура
	'Celsius', 'Kelvin', 'Fahrenheit', 'Rankine', 'Reaumur'

Время
	'MilliSeconds', 'Seconds', 'Minutes', 'Hours', 'Days', 'Weeks',
	'Fortnights', 'Months', 'Years', 'Decades',	'Centuries',
	'Millennia', 'DateTime', 'JulianDate', 'ModifiedJulianDate'


Установить язык по умолчанию
	SetDefaultLang( 'ru' ['en'] )
Получить установленный язык по умолчанию
	GetDefaultLang()

Установить максимальное время выполнения цикла ( ms )
	SetMaxLoopTime( 30000 )
Получить максимальное время выполнения цикла ( ms )
	GetMaxLoopTime()


Примеры

Вывод таблицы символов с кодами
	for( i := 0, i < 256, inc( i ), echo( chr( i ) + ' - ' + str( i ) ) )

Сделать скриншот области экрана и скопировать в буфер обмена
	ClipPut( Screenshot( 'area', GetRect() ) )


Автор: RinOS
https://sourceforge.net/projects/nppcalc/
